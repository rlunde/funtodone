I've decided to try doing the first version of the server side
of this in go (golang), using Gin. The client side will
be a javascript/html front-end that does most of the work, a localstore
option for working offline (or for people with no desire to sync)
and a simple service/database for people who want to sync.

Overall project todo:
=====================

[ ] redo the documentation - write more like tutorial than like idea dump
  [ ] consolidate all the readme stuff in one place:
  [ ] why? what problems we're trying to solve
  [ ] what? features that map to each problem
  [ ] how? explanation of how it all works (or will work)
  [ ] when? a swag at a schedule for MVP
[ ] consolidate and update the README.md files
[ ] consolidate and update the notes
[ ] get client and server barely working together
  [ ] get minimal login working with brief react/bootstrap client using go/authboss in service
[ ] as soon as FunToDone is working at all, move this ToDo into it
[ ] define what MVP looks like (and what defines looking nice enough for MVP)
[ ] get an install script working (even with a hello world version in it)
[ ] get an integration test suite working (even with a single test)
[ ] write a step by step guide for setting things up with database and project
[ ] think about how to make a mobile web app out of it
[ ] reorganize codebase: figure out a good directory structure + package structure
[ ] make it look nice enough for MVP
[ ] start with a "stack" only view, and do lists when that is working
[ ] focus on the fun, and get feedback about next steps

Client todo (src/client):
=====================

[ ] begin with UI/UX design, sticking to just the essential elements
  [ ] use react, but avoid package managers and dependency hell
  [ ] use TDD -- pick a lightweight framework, even if it doesn't mesh too well with react?
    [ ] this looks like a reasonably good starting point? 
        https://medium.freecodecamp.com/simple-react-testing-d9e25ec87e2#.wmizcb10p
[ ] start with a very basic beginner UI, maybe using require.js, react, redux, bootstrap
  [ ] ignore webpack, browserify, etc. for now if I can -- don't want or need the infrastructure
  [ ] use bootstrap and plan to do mobile first responsive design
  [ ] make a paper prototype or two
  [ ] iterate on a layout
  [ ] do a vertical spike with a single feature
    [ ] do basic layout of top level features
    [ ] implement enough of a schema to show a list of tasks
    [ ] display list of tasks
  [ ] the font needs to be more "fun" than bootstrap -- see how to do that

Model next steps (src/funtodone/model):
=======================================

 [ ] add JSON output and parsing
 [ ] add file I/O
 [ ] finish model_test -- see TODO list in that file
 [ ] add priority and date constraints, size, etc. to Tasks
 [ ] add generic metadata to tasks
 [ ] finish getting persistence to/from mongodb working (use https://labix.org/mgo)

Service next steps (src/funtodone/service):
===========================================

Authentication:
 [ ] get user login with sessions working
   [ ] combine the react/bootstrap stuff from the client dir with the authboss stuff in the template dir
     [ ] try leaving the client stuff where it is, and see if I can get gin to pull templates from that dir
 [ ] convert users and sessions storage to mongodb
 [ ] get account creation working with mongodb
 [ ] get email account verification working
 [ ] get password change working
 [ ] get password recovery working

Note: I don't plan to implement OAuth2 or account lockout after repeated login failures
(maybe later, but the point of this project is to have fun while getting things done, not
do a complete job of authentication).

Testing:
  [ ] make some curl-based bash scripts to exercise the REST API

Features next steps (across service, client, and model):
========================================================

[ ] gamify lists (as opposed to stacks)
  [ ] first pick a random task from a list
  [ ] second, log that task, and if it's not done, make sure it doesn't come up again right away (usually)

[ ] stack/list operations:
  [ ] look at the operations to support on tasks
    [ ] mark it done
    [ ] split it into N pieces
    [ ] add/edit/delete notes about task
    [ ] collapse into parent (if parent isn't next up)
 [ ] do the stuff in the current funtodone stack (funtodone/doc/ideas/funtodone.stack)

