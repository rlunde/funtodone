I've decided to try doing the first version of the server side
of this in go (golang), using Gin. The client side will
be a javascript/html front-end that does most of the work, a localstore
option for working offline (or for people with no desire to sync)
and a simple service/database for people who want to sync.

Overall project todo:
=====================

[x] rip out all the authboss crap
[ ] redo the documentation - write more like tutorial than like idea dump
  [ ] why? what problems we're trying to solve
  [ ] what? features that map to each problem
  [ ] how? explanation of how it all works (or will work)
  [ ] when? a swag at a schedule for MVP
[ ] get client and server barely working together
[ ] as soon as FunToDone is working at all, move this ToDo into it
[ ] define what MVP looks like (and what defines looking nice enough for MVP)
[ ] get an install script working (even with a hello world version in it)
[ ] get an integration test suite working (even with a single test)
[ ] write a step by step guide for setting things up with database and project
[ ] think about how to make a mobile web app out of it
[ ] reorganize codebase: figure out a good directory structure + package structure
[ ] make it look nice enough for MVP
[ ] start with a "stack" only view, and do lists when that is working
[ ] focus on the fun, and get feedback about next steps

Client todo (src/client):
=====================

[ ] begin with UI/UX design, sticking to just the essential elements
  [ ] use react, but avoid package managers and dependency hell
  [ ] use TDD -- pick a lightweight framework, even if it doesn't mesh too well with react?
    [ ] this looks like a reasonably good starting point?
        https://medium.freecodecamp.com/simple-react-testing-d9e25ec87e2#.wmizcb10p
[ ] start with a very basic beginner UI, maybe using require.js, react, redux, bootstrap
  [ ] ignore webpack, browserify, etc. for now if I can -- don't want or need the infrastructure
  [ ] use bootstrap and plan to do mobile first responsive design
  [ ] make a paper prototype or two
  [ ] iterate on a layout
  [ ] do a vertical spike with a single feature
    [ ] do basic layout of top level features
    [ ] implement enough of a schema to show a list of tasks
    [ ] display list of tasks
  [ ] the font needs to be more "fun" than bootstrap -- see how to do that

Model next steps (src/funtodone/model):
=======================================

 [ ] add file I/O (the library_test.go file reads/writes a file itself -- add that to model package)
 [ ] finish model_test -- see TODO list in that file
 [ ] add priority and date constraints, size, etc. to Tasks
 [ ] add generic metadata to tasks
 [ ] finish getting persistence to/from mongodb working (use https://labix.org/mgo)

Service next steps (src/funtodone/service):
===========================================

Testing:
 [ ] manual testing
   [ ] run ./f2d/funtodone to start go REST service
   [ ] try localhost:8080/ping to see it's working
Authentication:
 [ ] get user login with sessions working
   [ ] combine the react/bootstrap stuff from the client dir with golang authentication stuff
     [x] try leaving the client stuff where it is, and see if I can get gin to pull templates from that dir
       [x] http://localhost/f2d/ uses nginx to load index.html from "client"
     [ ] figure out how to register a user, starting from react
         [ ] use react to handle the POST, not the regular form post
         [ ] start with PHP, Ruby, Python (or something) convert to react
           [ ] http://michaelsoriano.com/building-a-user-registration-system-part-1-new-user-form/
           [ ] https://www.theodinproject.com/courses/ruby-on-rails/lessons/sessions-cookies-and-authentication
           [ ] https://django-book.readthedocs.io/en/latest/chapter14.html
         [ ] some react registration examples
           [ ] https://www.viget.com/articles/building-a-multi-step-registration-form-with-react
           [ ] https://vladimirponomarev.com/blog/authentication-in-react-apps-creating-components
     [ ] login using a POST of a user name and a password hash (initially)
       [ ] use react to do the POST, not the regular form post
       [ ] handle the post, send back a session cookie and (optional) error
       [ ] session state can be logged out, pending email validation, or logged in
       [ ] read up on using JWT and using OAUTH2
       [ ] think about making a code generator
 [ ] I had a brainstorm, and thought about using a stand-alone microservice for auth, and just proxy through to it
   [ ] maybe start with something like: https://github.com/davidguttman/authentic ? (and http://dry.ly/authentic )
   [ ] also see: https://gist.github.com/codesword/1b997a259d2509c3b0ea7f087c9b5466
   [ ] and: https://medium.com/technology-learning/how-we-solved-authentication-and-authorization-in-our-microservice-architecture-994539d1b6e6
   [ ] also: https://astaxie.gitbooks.io/build-web-application-with-golang/en/06.2.html
 [ ] convert users and sessions storage to mongodb
 [ ] get email account verification working
 [ ] get password change working
 [ ] get password recovery working

Note: I don't plan to implement OAuth2 or account lockout after repeated login failures
(maybe later, but the point of this project is to have fun while getting things done, not
do a complete job of authentication).

Testing:
  [ ] make some curl-based bash scripts to exercise the REST API
  [ ] golang REST testing: 
    [ ] https://blog.gopheracademy.com/advent-2014/testing-microservices-in-go/
    [ ] https://medium.com/@PurdonKyle/building-a-unit-testable-api-in-golang-b42ff1fcbae7
  [ ] React/Redux testing: 
    [ ] https://facebook.github.io/jest/docs/tutorial-react.html
    [ ] http://redux.js.org/docs/recipes/WritingTests.html
    [ ] https://medium.com/@gethylgeorge/testing-a-react-redux-app-using-jest-and-enzyme-b349324803a9

Features next steps (across service, client, and model):
========================================================

[ ] gamify lists (as opposed to stacks)
  [ ] first pick a random task from a list
  [ ] second, log that task, and if it's not done, make sure it doesn't come up again right away
    [ ] have an optional timer that counts a min and max time (at least 5 min, up to 90 min?)
    [ ] have an optional deadline, that affects whether the task comes up again sooner than it would otherwise
    [ ] don't alternate between too many different uncompleted tasks (maybe 3?)
  [ ] have a way to turn a simple list item into a stack (ask what is next step)
  [ ] try a conversational interface / ask questions?
  [ ] optionally keep score - number of tasks completed (balanced by how small they are -- don't encourange nanotasks)

[ ] stack/list operations:
  [ ] look at the operations to support on tasks
    [ ] mark it done
    [ ] split it into N pieces
    [ ] add/edit/delete notes about task
    [ ] collapse into parent (if parent isn't next up)
 [ ] do the stuff in the current funtodone stack (funtodone/doc/ideas/funtodone.stack)
 [ ] don't show people expanded views of tasks that aren't on top (or make it collapse by default)
 [ ] don't show more than the top item of any level of a stack
 [ ] export a stack or list to a JSON format file
 [ ] import a stack or list from a JSON format file

[ ] focus on the causes of procrastination and distraction, and how to work around them
  [ ] causes
    [ ] reliance on willpower rather than on preparation
    [ ] perfectionism
    [ ] overwhelm (too many things, too big)
    [ ] laziness (fundamentally don't want to do something)
    [ ] fear of failure
    [ ] being tired
    [ ] refusal to prioritize
    [ ] refusal to say "no"
  [ ] work-arounds
    [ ] ask "what would make this easier to do" rather than just trying to do it
    [ ] divide it into absurdly small pieces
    [ ] ask "what's the simplest thing that could possibly work"
    [ ] ask "what's the smallest step in the right direction"
    [ ] let go of attachment / ego
    [ ] choose a single task to start with, hide all the rest
    [ ] imagine how you would encourage a friend to do it
    [ ] find something you can learn while trying to do it
    [ ] find something you can be grateful for, about the task
    [ ] ask "what's the worst thing that could possibly happen"
    [ ] remind yourself that you have to fail in order to learn, and learn to eventually succeed
    [ ] if you're tired, just write things down and break things up, until there's something small enough
    [ ] force yourself to prioritize: pick the top 10 things, then pick the top 3 of those, then the top 1
    [ ] remind yourself that decisions aren't permanent, just pick something
    [ ] reward yourself for saying "no"

[ ] try out minimal gamification
 [ ] brainstorming...
   [ ] keep score - 1 point for every task started, 5 for every task completed
   [ ] bet against yourself - commit to pay micropayments (like overdue library book) if task not done
   [ ] compete as teams but with more meaningful teams than "red" vs "green" (or whatever)
     [ ] divide total score by number of team members
     [ ] money paid for each match goes to non-profit selected by winner
     [ ] trash talking
     [ ] baton passing (tasks themselves aren't shared, but are associated with a numbered "baton")
   [ ] show a graph of players locations, and avg. score per location/country
   [ ] raise money for charity (either like walkathon, or else pay money if don't get your task done)
   [ ] use animations when make progress
[ ] find other ways to motivate
  [ ] tell success stories
  [ ] seinfeld technique - don't break the chain
  [ ] look through literature for other techniques
  [ ] make funny video tutorials of using stacks and lists, with explanations of why to simplify

[ ] more ways to avoid distractions or deal with them
  [ ] http://www.lifehack.org/articles/productivity/10-critical-tips-prevent-distraction-and-sharpen-your-focus.html
  [ ] http://liveyourlegend.net/11-steps-to-insane-focus-get-more-of-what-matters-done-in-3-hours-than-most-do-in-a-week/
  [ ] https://www.forbes.com/sites/ciocentral/2011/10/27/are-you-ready-for-the-new-work-style/#2c334af643b9
  [ ] http://www.theproductivitypro.com/FeaturedArticles/article00144.htm
  [ ] https://psychcentral.com/blog/archives/2015/07/05/7-tips-for-dealing-with-distractions-for-adults-with-adhd/
  [ ] https://www.mindtools.com/pages/article/distractions.htm
  [ ] https://www.thebalance.com/tips-for-dealing-with-distractions-at-work-3515033

[ ] more ways to avoid procrastination
  [ ] http://www.lifehack.org/articles/featured/11-practical-ways-to-stop-procrastination.html
  [ ] http://jamesclear.com/how-to-stop-procrastinating
  [ ] http://www.wikihow.com/Stop-Procrastinating
  [ ] http://www.positivityblog.com/how-to-stop-procrastinating-7-timeless-tips/

[ ] resources for making incremental progress
  [ ] https://hbr.org/2011/05/the-power-of-small-wins
  [ ] https://medium.com/@skooloflife/small-wins-incremental-progress-and-momentum-de91b92e9cbf
  [ ] https://unmistakablecreative.com/podcast/leveraging-incremental-progress-to-level-up-your-life-with-steve-kamb
  [ ] https://www.inc.com/rhett-power/the-power-of-consistent-amp;-incremental-improvement.html
  [ ] http://www.leanproduction.com/kaizen.html
  [ ] https://en.wikipedia.org/wiki/Kaizen

[ ] design best practices
  [ ] https://www.smashingmagazine.com/web-design-essentials-examples-and-best-practices/
  [ ] https://www.orbitmedia.com/blog/web-design-standards/
  [ ] https://hi.service-now.com/kb_view.do?sysparm_article=KB0546789
  [ ] https://www.nickkolenda.com/user-experience/
  [ ] https://www.elegantthemes.com/blog/resources/10-rules-of-good-ui-design-to-follow-on-every-web-design-project
  [ ] https://designmodo.com/responsive-design-examples/
