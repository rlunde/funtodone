
[x] write down an initial list of operations to be done via CLI
[x] for each operation, write down the options needed
[ ] stub out things that aren't needed yet (e.g. user management / password stuff)
[ ] read the docs on how to do command line processing: https://github.com/spf13/cobra, beginning with adding a user
[ ] implement user add, user login, session verification (don't do other commands unless logged in)

Commands:

I could either go by:
  funtodone-cli add user --name foo --password bar
or
  funtodone-cli user add --name foo --password bar

I think I'm going to try the former, since it's more like English

I think the order to do things for testing is:
 1. add a user
 2. login as user
 3. create a task from command line args
 4. export a single task
 5. import a single task
 6. load/save a single task
 7. export a collection
 8. import a collection

Operations:
[ ] add a user
  [ ] options: name, password, email
[ ] login as a user, create a session
  [ ] options: name, password
[ ] create a task from command line args
  [ ] options: description, summary, level, status.done, status.started, status.due, status.created, status.modified, status.completed
[ ] update a task from command line args
  [ ] options: taskId, description, summary, level, status.done, status.started, status.due, status.created, status.modified, status.completed
[ ] import a single task from a file
  [ ] options: name, password
[ ] export a single task to a file
  [ ] options: filename or none for stdout
[ ] load a single task from the database
  [ ] options: filename
[ ] save a single task to the database
  [ ] options: taskId
[ ] add a child to a task
  [ ] options: parentId, childId
[ ] export a collection of tasks (stack, cycle, or list)
  [ ] options: taskId, filename (optional)
[ ] import a collection of tasks (stack, cycle, or list)
  [ ] options: filename
[ ] save a collection of tasks (stack, cycle, or list)
  [ ] options: taskId
[ ] load a collection of tasks (stack, cycle, or list)
  [ ] options: taskId
[ ] find a subtask via regex
  [ ] options: taskId, regex
[ ] find a task via regex
  [ ] options: regex
[ ] remove a child task
  [ ] options: taskId
[ ] remove a parent task
  [ ] options: taskId
[ ] modify a task (description, summary, level, status fields)
  [ ] options: taskId, description, summary, level, status.done, status.started, status.due, status.created, status.modified, status.completed

Note that we'll probably just add a "serve" command once we're done testing the CLI which will
cause it to process the options and then start an HTTP service.
