
[x] write down an initial list of operations to be done via CLI
[x] for each operation, write down the options needed
[ ] stub out things that aren't needed yet (e.g. user management / password stuff)
[ ] read the docs on how to do command line processing: https://github.com/spf13/cobra, beginning with adding a user
[ ] implement user add, user login, session verification (don't do other commands unless logged in)

Commands:

I could either go by:
  funtodone-cli add user --name foo --password bar
or
  funtodone-cli user add --name foo --password bar

I think I'm going to try the former ("add user"), since it's more like English

I think the order to do things for testing is:
 1. add a user
 2. login as user
 3. add a task from command line args
 4. export a single task
 5. import a single task
 6. load/save a single task
 7. export a collection
 8. import a collection

I realized something very late in the game, which is that if the CLI is intended to make
testing of the library easier, we then have to test the CLI, which is much harder than
just writing tests against the library directly. So what's the point of a CLI?

I'm still thinking about that. It's late, but I think the most likely thing to do is throw
out the whole CLI, and change the server to run a database bootstrap (create an initial user)
if one doesn't already exist. Then write tests against the library as just regular go tests.

Note that we'll probably just add a "serve" command once we're done testing the CLI which will
cause it to process the options and then start an HTTP service.
