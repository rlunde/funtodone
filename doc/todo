I've decided to try doing the first version of the server side
of this in go (golang), using Gin. If all goes well, there will
be a javascript/html front-end that does most of the work, a localstore
option for working offline (or for people with no desire to sync)
and a simple service/database for people who want to sync.

To Do:
[ ] as soon as FunToDone is working at all, move this ToDo into it
[ ] define what MVP looks like
[ ] get an install script working (even with a hello world version in it)
[ ] get a test suite working (even with a single test)
[ ] start with a very basic beginner UI, maybe using require.js, react, backbone, bootstrap
  [ ] ignore webpack, browserify, etc. for now -- don't want or need the infrastructure
  [ ] make a paper prototype or two
  [ ] turn it into a layout
  [ ] start with bootstrap, since we definitely want a simple responsive design
  [ ] do a vertical spike with a single feature
    [ ] do basic layout of top level features
    [ ] implement enough of a schema to show a list of tasks
    [ ] display list of tasks
[ ] implement a basic server side web api and web server for the assets
[ ] get a minimal set of auth features working
  [ ] implement all the usual login/password features (new account, change pw, lost pw)
  [ ] write a step by step guide for setting things up with database and project
[ ] the font needs to be more "fun" than bootstrap -- see how to do that
[ ] think about how to make a mobile web app out of it

[ ] gamify lists (as opposed to stacks or cycles)
  [ ] first pick a random task from a list
  [ ] second, log that task, and if it's not done, make sure it doesn't come up again right away (usually)

[ ] I need to reorganize this codebase: github shouldn't have a subdirectory called github
  [ ] move everything to top level src, bin, doc, dist directories
  [ ] redo build script to find src in right places and put executables/etc. in right places

[ ] design operations to be done by command line and API
  [ ] create a top level stack, cycle, or list
  [ ] add a subtask to a stack, cycle, or list
    [ ] or, add it as a subtask of the top level or of a subtask
    [ ] generate a task ID
  [ ] edit, move, delete tasks/subtasks
  [ ] look at the operations to support on tasks
    [ ] mark it done
    [ ] split it into N pieces
    [ ] add/edit/delete notes about task
    [ ] collapse into parent (if parent isn't next up)
    (see "ideas" in this directory)

[ ] First steps
 [ ] do the stuff in the current funtodone stack (funtodone/doc/ideas/funtodone.stack)
 [ ] add more tests (see list at end of model_test.go)
 [ ] get persistence to/from mongodb working (use https://labix.org/mgo)
 [ ] edit the stack for funtodone (replace this file)
 [ ] make code that can produce/re-create the JSON for the stack (../src/data/stacks/funtodone.json)
 [ ] add the rest of the operations above to the stack
 [ ] get a bare-bones web view working
 [ ] add auth to web view
 [ ] make it look nice enough for MVP
 [ ] start with a "stack" only view, and do cycles and lists when that is working
 [ ] focus on the fun, and get feedback about next steps


