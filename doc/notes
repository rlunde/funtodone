The node_modules under client originally came along with the sample I installed from todomvc,
but others (e.g. flux) came from the usual:

cd client
npm install flux

React comes from the facebook CDN:

<!-- The core React library -->
<script src="https://fb.me/react-0.14.0.js"></script>
<!-- The ReactDOM Library -->
<script src="https://fb.me/react-dom-0.14.0.js"></script>

For now at least, I'll make the directory containing this file be the
standard golang location for go source files, so the workspace directory
($GOPATH) will be four levels up. I use the source-me.sh file to set
up $GOPATH accordingly:

$source source-me.sh

To build and run the server:

$ go build
$ ./funtodone

To test it, open this in the browser:

http://localhost:8100/

I found a module named AuthBoss that looks like it might be exactly what I want, for
doing user authentication / signup! It's here: https://github.com/go-authboss/authboss

So far all I've done is try to load it -- need to configure it next. To do that, I
need to decide where to store passwords, etc. I think for right now, I'll just try
to save things locally in the browser localstore.

OK, I'm switching over to a "standard" linux based install (not using Heroku or
a shared hosting server) -- I signed up for Digital Ocean and mapped the funtodone.com
domain to it.

I want to take a big step back and set up this github project as a "standard" golang-based
web project on github, which will require some investigation.

Here are some links for learning how to get set up on Digital Ocean:
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04
https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-as-a-web-server-and-reverse-proxy-for-apache-on-one-ubuntu-14-04-droplet

Here are some resources for a "standard" golang project:

https://golang.org/doc/code.html
https://talks.golang.org/2014/organizeio.slide#1
https://github.com/golang/go/wiki/GithubCodeLayout

