The client was initially made via https://github.com/facebookincubator/create-react-app

I'm trying it with yarn.

I'm following the Udemy course by Stephen Grider, section 6, and trying to add
my own content at the same time. Yikes!

https://www.udemy.com/react-redux/learn/v4/content
https://github.com/StephenGrider/ReduxSimpleStarter

yarn upgrade --upgrade-interactive
yarn start
yarn add react-router

"yarn build" said this:
=======================================
Rons-MBP:client ron$ yarn build
yarn build v0.27.5
$ react-scripts build
Creating an optimized production build...
Compiled successfully.

File sizes after gzip:

  48.29 KB  build/static/js/main.24a4ad74.js
  288 B     build/static/css/main.cacbacc7.css

The project was built assuming it is hosted at the server root.
To override this, specify the homepage in your package.json.
For example, add this to build it for GitHub Pages:

  "homepage" : "http://myname.github.io/myapp",

The build folder is ready to be deployed.
You may serve it with a static server:

  yarn global add serve
  serve -s build

Done in 14.41s.
=======================================

"yarn start" launched a chrome tab to localhost:3000 which included this:
To get started, edit src/components/App.js and save to reload.

I'm following along with Stephen Grider's Udemy react-redux video tutorial,
starting in section 6.

react-router includes node_modules/history

history sends updated url to react-router, which sends new components to react,
which renders.

In order to catch up to Stephen Grider, I need to try to add the stuff from 
his react-simple-starter project (redux, in particular) to the framework installed
by 

I'm actually trying to keep two projects going in the same direction temporarily,
this one (funtodone) and a python/flask one (writertoys). The next step is to
convert from react-router (version 3) to react-router-dom (version 4) since that's
where things are now (not where the tutorial I'm following is).

I had to re-install eslint with npm, then run eslint --init to get past the
eslint errors that showed up in vscode.

I fiddled around for another hour trying to get eslint to behave, and finally
got it mostly working. I needed to add the rule "react/jsx-uses-vars":1

Also, vscode screws up the JSX formatting in "format document" -- not sure what
to do about that yet.


====================================================
December 10, 2017
====================================================

Today I just want to see if I can get a basic page layout
working, starting with Stephen Grider's Udemy course as applied
to this project.

I added a few page elements from the HolyGrail sample,
just to have something to replace with react components
later on.


====================================================
December 19, 2017
====================================================

I had a sudden epiphany the other day, about all of my
projects. Yes, I'd like to run funtodone as a service,
in which case I'll need to add authorization, and I'd like
to use the sideauth project to do that -- but I can do
that last and still have it be useful for lots of people.

How? I'll make a service that runs in a docker container,
that people can either run locally on their laptop/desktop,
or somewhere else where they can control access themselves.

Start with the fun part, in other words, and do the authorization
part later!

====================================================
December 28, 2017
====================================================

Today's random project: design/funtodone

I added react-bootstrap, and fiddled around a bit with
the flex layout. Still need to do a lot to make it look 
like anything.

https://react-bootstrap.github.io/components.html#navbars

====================================================
December 30, 2017
====================================================

Today's random project: simplify/funtodone
